# .github/workflows/build-release.yml

name: 📦 Build and Release

on:
  push:
    tags:
      - 'v*'

env:
  SPEC_NAME: 'audiohub.spec'
  APP_NAME: 'audiohub'

jobs:
  build_and_release:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    
    permissions:
      contents: write
      
    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 设置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 3. 为 pip 添加缓存，加速后续构建
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4. 安装系统和 Python 依赖
      - name: Install dependencies
        run: |
          # --- 步骤 1: 先安装系统级依赖 ---
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y portaudio19-dev libasound2-dev ffmpeg upx-ucl
          elif [ "$RUNNER_OS" == "macOS" ]; then
            # ↓↓↓ 核心修改在这里 ↓↓↓
            brew install portaudio ffmpeg upx
          elif [ "$RUNNER_OS" == "Windows" ]; then
            choco install ffmpeg upx
          fi

          # --- 步骤 2: 再安装 Python 依赖 ---
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
        shell: bash

      # 5. 使用 PyInstaller 进行打包
      - name: Build with PyInstaller
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            # Windows 默认行为正确，无需修改
            pyinstaller --noconfirm ${{ env.SPEC_NAME }}
          else
            # 对于 Linux 和 macOS，使用 --upx-dir 强制启用 UPX
            # /usr/bin/ 是 upx-ucl 和 brew install upx 的标准安装路径
            pyinstaller --noconfirm --upx-dir /usr/bin/ ${{ env.SPEC_NAME }}
          fi
        shell: bash

      # 6. 打包构建结果
      - name: Package the artifact
        id: package
        run: |
          OUTPUT_DIR="dist/${{ env.APP_NAME }}"
          
          if [ "$RUNNER_OS" == "Windows" ]; then
            ARTIFACT_NAME="${{ env.APP_NAME }}-Windows.zip"

            7z a -tzip $ARTIFACT_NAME "./dist/${{ env.APP_NAME }}.exe"
          elif [ "$RUNNER_OS" == "macOS" ]; then
            ARTIFACT_NAME="${{ env.APP_NAME }}-macOS.zip"

            ditto -c -k --sequesterRsrc --keepParent "${OUTPUT_DIR}.app" $ARTIFACT_NAME
          else
            ARTIFACT_NAME="${{ env.APP_NAME }}-Linux.tar.gz"

            tar -czvf $ARTIFACT_NAME -C ./dist ${{ env.APP_NAME }}
          fi
          
          echo "artifact_name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT
        shell: bash

      # 7. 上传构建产物到 Release
      - name: Upload Release Asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.package.outputs.artifact_name }}
          asset_name: ${{ steps.package.outputs.artifact_name }}
          tag: ${{ github.ref }}
          overwrite: true
